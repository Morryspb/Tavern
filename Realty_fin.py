#!/usr/bin/env python
# coding: utf-8

# # Исследование объявлений о продаже квартир
# 
# В вашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет. Нужно научиться определять рыночную стоимость объектов недвижимости. Ваша задача — установить параметры. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность. 
# 
# По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта, ближайшего парка и водоёма. 

# ### Откройте файл с данными и изучите общую информацию. 

# <b>Цель исследования:</b> выяснить, какие параметры жилого объекта влияют на ее стоимость (значимы для покупателей) и определяют цену, за которую объект может быть продан.
# Пошагово:
# <ul>
#     <li>Изучить данные, чтобы понять, насколько они пригодны для исследования
#     <li>Обработать данные, устранив опечатки, различное написание названий, и пропуски, если это возможно (+написать рекомендацию по заполнению таблиц, которая упростит работу в будущем, типа, "пожалуйста, для обозначения локаций пользуйтесь ID локации, а не ее названием")
#     <li>Рассчитать и добавить метрики
#     <li>Проанализировать их влияние
#     <li>Написать вывод
# </ul>


import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv('/datasets/real_estate_data.csv',sep='\t')
print(data.info())


# In[2]:


pd.options.display.float_format = '{:,.2f}'.format #сокращаем вывод чисел с плвающей точкой до двух знаков после запятой для удобства
print(data.describe())


# In[3]:


data.hist(figsize=(15, 20)); #строим набор гистограмм по сырым данным


# <b>Общее количество записей 23699</b>
# <ul>
#     <li>
# <b>total_images</b> -  без пропусков, целое число фотографий, кажется, что ок
# 
# <li><b>last price</b> - без пропусков, число с плавающей точкой, вероятно, цена с копейками
# 
# <li><b>total_area</b> - без пропусков, число с плавающей точкой, вероятно, в метрах. Подавляющее большинство значений - менее 200.
# 
# <li><b>first_day_exposition</b> - без пропусков, object, должен быть datetime
# 
# <li><b>rooms</b> - без пропусков, целое число, кажется, что ок
# 
# <li><b>ceiling_height</b>  - много пропусков, число с плавающей точкой. Не заполнили, когда заполняли вручную? Странно, что такая большая доля пропусков в важном параметре. Возможна потеря данных при переносе части записей из другой таблицы, где это поле в принципе отсутствует. Заполнить медианным значением? Минимум 1, максимум 100 - вряд ли такое может быть, если речь о высоте потолков, нужно перепроверить.
# 
# <li><b>floors_total</b> - минимум пропусков, число с плавающей точкой, переделать в int, общее количество этаже вряд ли может быть нецелым. Похоже, что забыли добавить общую этажность при заполнении объявления. Может быть еще одна причина: в списке много деревень – может быть, общая этажность совпадает с этажом, поскольку в деревнях много одноэтажных домов. Перепроверить и добавить общую этажность 1, если этаж квартиры 1, а локация – деревня? Удалить те строчки, где этих данных нет.
# <li><b>living_area</b> - мало пропусков, число с плавающей точкой. Не заполнили, когда заполняли вручную. Один из важнейших параметров
# <li><b>floor</b> - без пропусков, целое число, ок.
# <li><b>is_apartment</b> - много пропусков, object, уникальные значения поля True, False и NaN. Вероятно, при ручном заполнении не вписывали частично данные там, где is_apartment = False. Решение - заполнить пропуски значением False, привести к bool.
# <li><b>studio</b> - без пропусков, булево значение, ок
# <li><b>open_plan</b> - без пропускоы, булево значение, ок
# <li><b>kitchen_area</b> - мало пропусков, число с плавающей точкой, метров. Возможно, для восстановления недостающих данных допустимо вычесть площадь кухни из общей площади, поскольку площадь балконов, санузлов и подсобных помещений обычно минимальна. Посмотреть внимательно на корреляцию общей площади и жилой площади по тем данным, которые есть, взять медианную разницу.
# <li><b>balcony</b> - много пропусков при наличествующих значениях от 0 до 5, вероятно незаполнение при отсутствии балконов. Заполнить нулями. Число с плавающей точкой заменить на int
# <li><b>locality_name</b> - мало пропусков. Удалить из таблицы записи.
# <li><b>airports_nearest</b> - мало пропусков, число с плавающей точкой. Максимальное значение 84,869.00, минимальное 0, среднее 28,793.67 – в метрах. Вероятно, что пустые значения возникли там, где расстояние до аэропорта превышало значение nearest (похоже, что 85 километров). Нулевые значения – квартира в аэропорту? Посмотреть внимательно на малые значения расстояния. Решение: сделать дополнительный столбец, показывающий, есть аэропорт поблизости или нет bool
#     <li><b>cityCenters_nearest</b> - мало пропусков, число с плавающей точкой. Максимальное 65,968.00, минимальное 181.00, среднее 14,191.28 - в метрах. Вероятно, что пустые значения возникли там, где расстояние до центра превышало допустимое значение максимума (66 километров). Решение - дополнительный столбец с классификацией квартир по расстоянию от центра города, где NaN будет обозначено как "более 66 км".
# <li><b>parks_around3000</b> - мало пропусков, число с плавающей точкой, значения от 0 до 3 и NaN. Вероятно, это количество парков, находящихся на расстоянии 3 км от квартиры. NaN логично было бы заполнить нулями, так как вероятно, при отсутствии парков на указанном расстоянии это поле не заполняли.
# <li><b>parks_nearest</b> - много пропусков, число с плавающей точкой. Среднее 490.80, максимальное 3190.00, минимальное 1.00. Вероятно, километраж до ближайшего парка в метрах. Пропуски связаны с превышением максимального значения расстояния до парка. Заполнить пропуски медианным значением для локации, если парк в пределах 3 км найден?
# <li><b>ponds_around3000</b> и <b>ponds_nearest</b> – обработать аналогично паркам.
# <li><b>days_exposition</b> - мало пропусков, вероятно, связано с незаполнением данных о квартире либо с тем, что квартира все еще выставлена на продажу. Посмотреть внимательно, какова доля пропусков для дорогих и дешевых квартир, для тех, которые выставлены на продажу давно и недавно, сделать вывод.

# <div class="alert alert-block alert-success">✔️
#

# ### Предобработка данных

# In[4]:


#Дата публикации объявления
data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'])#сделаем object датой

#Локация продажи
data.dropna(subset=['locality_name'], inplace=True) #удаляем все данные, для которых неизвестна локация
data['locality_name'] = data['locality_name'].str.replace("посёлок", "поселок") 
data['locality_name'] = data['locality_name'].str.replace("поселок городского типа","поселок")
data['locality_name'] = data['locality_name'].str.replace("городской поселок","поселок")
data['locality_name'] = data['locality_name'].str.replace("поселок при железнодорожной станции","поселок")
data['locality_name'] = data['locality_name'].str.replace("поселок станции","поселок")
data['locality_name'] = data['locality_name'].str.replace("коттеджный поселок","поселок")
#унифицируем написание поселков

#Количество парков и прудов
data['parks_around3000'] = data['parks_around3000'].fillna(value=0).astype(int)
#если парков не найдено, считаем, что их 0, приводим к целому числу
data['ponds_around3000'] = data['ponds_around3000'].fillna(value=0).astype(int)
#если прудов не найдено, считаем, что их 0, приводим к целому числу

#Количество комнат
data['rooms']=data['rooms'].astype('int') #не может быть не целым при продаже целого объекта
#print(len(data.query('rooms == 0 and studio !=True'))) #59 квартир, где комнат 0, но это не студия. Странно.
#print(data.query('rooms == 0 and studio !=True')) #и также их total_area и living_area  различаются, следовательно, там есть комната
data.loc[(data['rooms'] == 0) & (data['studio']==False), 'rooms'] == 1 #так и запишем

#Общее количество этажей
data['floors_total'].isna().sum() #считаем пропуски в столбце с общим количеством этажей, их немного
data.dropna(subset=['floors_total'], inplace=True) #удаляем эти записи, поскольку нельзя быть уверенными в том, не последний л это этаж
data['floors_total']=data['floors_total'].astype('int') #приводим к целочисленному значению

#Балконы
data['balcony'].isna().sum() #проверяем пропуски в столбце
data['balcony'] = data['balcony'].fillna(value=0) #заполняем их нулями
data['balcony']=data['balcony'].astype('int') #приводим столбец к целочисленному формату 

#Флаг апартаментов
data['is_apartment'] = data['is_apartment'].fillna(value=False)#заполняем пропуски в поле значением False

#Расстояние до центра города
data=data.rename(columns={'cityCenters_nearest':'city_center_nearest'})

#Время продажи
data['days_exposition'].fillna(data['days_exposition'].median(), inplace=True)

# In[5]:


#Потолки
data['ceiling_height'].unique()#смотрим, какие есть уникальные значения
data.query('ceiling_height > 5 or ceiling_height < 2') #смотрим на выбивающиеся значения
data.loc[data.ceiling_height > 15, 'ceiling_height'] /= 10 #там, где очевидна опечатка в знаке, переставляем знак, чтобы вышло приемлемое значение
data.query('ceiling_height > 5 or ceiling_height < 2').sort_values(by='last_price', ascending=False)#смотрим в сортировке, похоже ли на правду: странные значения остались, но их немного

#заменяем пропуски медианным значением
data['ceiling_height'].fillna(data['ceiling_height'].median(), inplace=True)

data.info()

# In[6]:


data['city_center_nearest'].fillna(data['city_center_nearest'].median(), inplace=True)#заполним медианным значением
data['city_center_nearest'] = data['city_center_nearest'].astype(int)
#Расстояния до аэропортов, парков и прудов
data['ponds_nearest'].fillna(data['ponds_nearest'].median(), inplace=True)#заполним медианным значением
data['airports_nearest'].fillna(data['airports_nearest'].median(), inplace=True)#заполним медианным значением
data['parks_nearest'].fillna(data['parks_nearest'].median(), inplace=True)#заполним медианным значением

# Заменяем пустые значения жилой площади и площади кухни
living_coef = data['living_area'].mean() / data['total_area'].mean() #среднее соотношение жилой и общей
kitchen_coef = data['kitchen_area'].mean() / data['total_area'].mean() #среднее соотношение кухни и общей
data['living_area'].fillna(living_coef * data['total_area'], inplace=True) #заполняем пропуски вычисляемым значением
data['kitchen_area'].fillna(kitchen_coef * data['total_area'], inplace=True)#то же самое по кухне

# Устанавливаем маркер 1600(максимум по полю = 1,580.00) для пропусков во времени продажи (еще не проданы?), делаем целым числом
data['days_exposition'].fillna(data['days_exposition'].median(), inplace=True)
data['days_exposition'] = data['days_exposition'].astype(int)

#Меняем тип данных в Количестве фотографий
data['total_images'] = data['total_images'].astype(int)

data.info() #кажется, что теперь ок

# In[7]:


#Проверим датасет на явные дубликаты
data.duplicated().sum()

# data['first_day_exposition'] в datetime из object - формат понадобится для построения графиков по времени, и еще, чтобы посмотреть распределения по дням недели, сезонные и годовые вплески и изменения
# Целые числа для парков, прудов логичны (трудно представить, как выглядит половина пруда или парка), и этажей – так можно будет соотнести общую этажность с номером этажа и понять, не находится ли квартира на первом или последнем этажах (что влияет на стоимость и привлекательность объекта)
# То же самое касается числа балконов и числа приложенных фотографий объекта – квартира с половиной балкона вряд ли может быть выставлена на продажу, а половина фотографии – это все же фотография, пусть и не очень хорошая
# Дни показа объявления также считаем целыми числами – так будет проще, прибавив их к дате публикации объявления, узнать дату продажи (может быть, есть месяцы или дни недели, когда продается больше или меньше квартир, чем обычно)
# 

# ### Посчитайте и добавьте в таблицу новые столбцы

# In[8]:


#стоимость квадратного метра
data['square_price'] = data['last_price'] / data['total_area']
data['square_price'] = data['square_price'].astype(int)

# Добавляем столбцы дня недели, месяца и года
data['weekday'] = data['first_day_exposition'].dt.weekday
data['month'] = data['first_day_exposition'].dt.month
data['year'] = data['first_day_exposition'].dt.year

# In[9]:


#разметим все объекты по типам этажей: первый (теоретически должен снижать цену), последний (теоретически должен снижать цену) и другой (не влияет на цену)
def floor_type(row):
    if row['floor'] == 1:
        return 'первый'
    elif row['floor'] == row['floors_total']:
        return 'последний'
    else:
        return 'другой'
data['floor_type'] = data.apply(floor_type, axis=1) #добавим столбец в общую таблицу`

#найдем значение удаленности объекта от центра в км
data['distance'] = (data['city_center_nearest']/1000).astype(int)
data.columns #проверим, что новый столбец на месте

# ### Проведите исследовательский анализ данных

# In[10]:


#Посмотрим на общую площадь объектов в датасете (4.1.1)
plt.hist(data['total_area'], bins=50, range=(15, 210))
plt.title('Площадь объектов')
plt.xlabel('Квадратные метры')
plt.ylabel('Количество объектов')
plt.show()
print('Топ10 по общей площади:')
print(data['total_area'].sort_values(ascending=False).head(10))

# In[11]:


#Отдельно посмотрим на эти пики, где количество продаваемых объектов велико
plt.hist(data['total_area'], bins=50, range=(25, 50))
plt.title('Площадь объектов')
plt.xlabel('Квадратные метры')
plt.ylabel('Количество объектов')
plt.show()
print(data['total_area'].head())
data['total_area'].describe()


# Среднее значение общей площади объектов в выборке 60.32 метра, минимальное - 12м (студия?), максимальное 900м. Квартира площадью квадратный километр? Больше похоже на крытое футбольное поле. Отфильтруем недостоверные значения.
# Есть заметный пик около 32 (похоже, что это типичная однушка или студия), второй - около 45 (больше похоже на небольшую двушку), мало квартир после 100 метров и до 20. 

# In[12]:


good_objects = data.query('total_area <400')
print(len(good_objects))


# In[13]:


#Посмотрим на жилую площадь объектов в получившемся фильтрованном датасете (4.1.2)

plt.hist(good_objects['living_area'], bins=50)
plt.title('Жилая площадь объектов')
plt.xlabel('Квадратные метры')
plt.ylabel('Количество объектов')
plt.show()
print('Топ10 больших:')
print(good_objects['living_area'].sort_values(ascending=False).head(10))
print('Топ10 маленьких:')
print(good_objects['living_area'].sort_values(ascending=False).tail(10))


# Основная масса квартир на рынке находится в диапазоне от 10 до 60 кв м жилой площади, однако присутствует небольшая, но четко видимая доля крупных люксовых объектов: площад в топе увеличиваются постепенно, с небольшим шагом, без выбросов. Оставим их. А вот объекты с минимальной жилой площадью вызывают вопросы: вероятно, это квартиры с нарушениями или данные заполнены с ошибкой. Посмотрим на проблемный срез внимательнее.

# In[14]:


print(good_objects.query('living_area <=3'))


# Выглядят не слишком похоже на правду: общая площадь соответствует нормальной квартире, при этом жилая – 2 и 3 квадратных метра. Выбросим их.

# In[15]:


good_objects = good_objects.query('living_area >3')
print(good_objects['living_area'].sort_values(ascending=False).tail(10))


# In[16]:


#Посмотрим на площадь кухни объектов в получившемся фильтрованном датасете (4.1.3)

plt.hist(good_objects['kitchen_area'], bins=50)
plt.title('Площадь кухни')
plt.xlabel('Квадратные метры')
plt.ylabel('Количество объектов')
plt.show()
print('Топ10 больших:')
print(good_objects['kitchen_area'].sort_values(ascending=False).head(10))
print('Топ10 маленьких:')
print(good_objects['kitchen_area'].sort_values(ascending=False).tail(10))


# Кухня типичной питерской квартиры - от 5 до 17 метров, 20+ люксовые объекты, меньше 4 - вероятно, кухни-ниши в студиях. Проверим это.
# 

# In[17]:


little_kitchen = good_objects.query('kitchen_area<3')
counter1 =0
counter2 =0
for each in little_kitchen['studio']:
    if each == True:
        counter1 +=1
    else:
        counter2 +=1
print(counter1)
print(counter2)


# Избавимся от подозрительных квартир

# In[18]:


good_objects = good_objects.query('kitchen_area>4'or'studio ==True')
print(good_objects['kitchen_area'].sort_values(ascending=False).tail(10))
plt.hist(good_objects['kitchen_area'], bins=50)
plt.title('Площадь кухни')
plt.xlabel('Квадратные метры')
plt.ylabel('Количество объектов')
plt.show()


# In[19]:


#Изучим цены объектов (4.1.4)
plt.hist(good_objects['last_price'], bins=30, range=(0,20000000))
plt.title('Цена объекта')
plt.xlabel('Цена')
plt.ylabel('Количество квартир')
plt.show()
print('Самые дешевые квартиры:')
print(good_objects['last_price'].sort_values(ascending=False).tail(10))
print('Самые дорогие квартиры:')
print(good_objects['last_price'].sort_values(ascending=False).head(10))
good_objects['last_price'].describe()


# Средняя стоимость квартиры - 6,4 млн, максимальная 330 млн, минимальная 470 тысяч. Похоже на правду.
# 

# In[20]:


#Посмотрим на покомнатный разброс(4.1.5)
plt.hist(good_objects['rooms'], bins=20)
plt.title('Количество комнат')
plt.xlabel('Комнатность')
plt.ylabel('Количество квартир')
plt.show()
print('Топ многокомнатных:')
print(good_objects['rooms'].sort_values(ascending=False).head(10))
good_objects.describe()


# Многокомнатных квартир мало, основная масса – типичные квартиры 1, 2 и 3 комнаты

# In[21]:


#Посмотрим на цены квадратного метра
plt.hist(good_objects['square_price'], bins=50, range=(0,250000))
plt.title('Стоимость квадратного метра')
plt.xlabel('Стоимость')
plt.ylabel('Количество квартир')
plt.show()
print('Самые дорогие квартиры за метр:')
print(good_objects['square_price'].sort_values(ascending=False).head(10))
good_objects.describe()


# Миллион семьсот за квадрат? Странно, но возможно, это люксовые квартиры. Посмотрим на потолки.

# In[22]:


#Потолки (4.1.6)
plt.hist(good_objects['ceiling_height'], bins=50)
plt.title('Высота потолков')
plt.xlabel('Высота потолков')
plt.ylabel('Количество квартир')
plt.show()
print('Самые высокие потолки:')
print(good_objects['ceiling_height'].sort_values(ascending=False).head(10))
good_objects['ceiling_height'].describe()


# 2.69 - действительно вполне среднее значение для потолков. Попробуем поделить их на группы, пользуясь типичными значениями высот потолков

# In[23]:



roof_type =[]
for roof in good_objects['ceiling_height']:
    if roof <2.5:
        roof_type.append('низкие')
    elif 2.5 <= roof <= 2.6:
        roof_type.append('блочные')
    elif 2.6 <roof<=2.7:
        roof_type.append('хрущевки')
    elif 2.7 < roof < 3.2:
        roof_type.append('новые')
    elif 3.2 <= roof <=4:
        roof_type.append('сталинки')
    else:
        roof_type.append('исключение')
    

good_objects['ceiling_type'] = roof_type
pd.Series(good_objects['ceiling_type'].hist())
plt.show()


# Кажется, похоже на правду: много хрущевок и блочных домов, значительная доля новостроек, немного элитных сталинок
# 
# 

# In[24]:


#Посмотрим на расположение объектов по этажам (4.1.7): 
plt.hist(good_objects['floor'], bins=50)
plt.title('Этажи')
plt.xlabel('Расположение по этажам')
plt.ylabel('Количество квартир')
plt.show()
good_objects['floor'].describe()


# Квартиры, расположенные выше 6 этажа, встречаются реже, чем ниже 6, что объясняется значительной долей пятиэтажек в датасете
# Типичная продаваемая квартира расположена на 5-6 этажах

# In[25]:


#Посмотрим на расположение объектов по типу этажей (4.1.8): 
plt.hist(good_objects['floor_type'])
plt.title('Этажи')
plt.xlabel('Расположение по этажам')
plt.ylabel('Количество квартир')
plt.show()
good_objects['floor_type'].describe()


# Квартиры на других этажах закономерно встречаются чаще, чем на первом и на последнем. Самый редко встречающийся этаж - первый

# In[26]:


#Посмотрим на общую этажность (4.1.9): 
plt.hist(good_objects['floors_total'])
plt.title('Общая этажность')
plt.xlabel('Высота дома в этажах')
plt.ylabel('Количество квартир')
plt.show()
print(good_objects['floors_total'].sort_values(ascending=False).head(10))
good_objects['floors_total'].describe()


# Типичный дом в датасете – пяти- или десятиэтажный, однако есть заметная доля высотных зданий с продаваемыми квартирами (20-30 этажей). Видимый максимум - 60, что выглядит маловероятно, поскольку самое многоэтажное здание в Санкт-Петербурге - Лахта-центр, и оно нежилое (88 этажей), а следующая за ним башня "Конституция" насчитывает 42 этажа. Маловероятно, что в области с учетом заболоченности земель будут присутствовать более высокие жилые объекты. Возьмем эту этажность как ограничитель и отфильтруем подозрительные объекты.

# In[27]:


good_objects=good_objects.query('floors_total <=42')
plt.hist(good_objects['floors_total'])
plt.title('Общая этажность')
plt.xlabel('Высота дома в этажах')
plt.ylabel('Количество квартир')
plt.show()


# In[28]:


#Посмотрим на расстояние до центра города в метрах (4.1.10): 
plt.hist(good_objects['city_center_nearest'],bins=50)
plt.title('Удаленность от центра города')
plt.xlabel('Расстояние до центра города в метрах')
plt.ylabel('Количество квартир')
plt.show()
print(good_objects['city_center_nearest'].sort_values(ascending=False).head(10))
good_objects['city_center_nearest'].describe()


# Самая частая удаленность от центра - около 14км

# In[29]:


#Посмотрим на расстояние до аэропорта(4.1.11): 
plt.hist(good_objects['airports_nearest'],bins=50)
plt.title('Удаленность от аэропорта')
plt.xlabel('Расстояние до аэропорта')
plt.ylabel('Количество квартир')
plt.show()
print(good_objects['airports_nearest'].sort_values(ascending=False).head(10))
good_objects['airports_nearest'].describe()


# Типично расстояние до аэрпорта - 28 км. 
# Может ли квартира располагаться прямо в аэропорту? Посмотрим на нее внимательнее

# In[30]:


good_objects.query('airports_nearest == 0.00')


# Выглядит достоверно: 3 этаж 9-этажного дома, 22 км от центра Санкт-Петербурга. Оставим ее как есть.

# In[31]:


#Посмотрим на расстояние до ближайшего парка(4.1.12): 
plt.hist(good_objects['parks_nearest'],bins=50)
plt.title('Удаленность от парка')
plt.xlabel('Расстояние до парка')
plt.ylabel('Количество квартир')
plt.show()
print(good_objects['parks_nearest'].sort_values(ascending=False).head(10))
good_objects['parks_nearest'].describe()


# Типичная удаленность от парка - около 500 метров.

# In[32]:


#Посмотрим на разброс по дням и месяцам публикации объявлений(4.1.13): 
plt.hist(good_objects['weekday'],bins=7)
plt.title('День публикации')
plt.xlabel('День публикации')
plt.ylabel('Количество квартир')
plt.show()

plt.hist(good_objects['month'],bins=50)
plt.title('Месяц публикации')
plt.xlabel('Месяц публиикации')
plt.ylabel('Количество квартир')
plt.show()


# В выходные объявлений меньше, чем в будни, незначительные всплески во вторник и четверг, в понедельник меньше всего объявлений из будних дней, что похоже типичный график по количеству обрабатываемых рабочих задач в крупной компании. Вероятно, связано с рабочим графиком риэлторов.
# Провал в январе (месяц праздников) и в июне (начало сезона отпусков), всплески в феврале и марте (возвращениие к работе?),летом публикаций объявлений меньше, чем осенью и тем более зимой/ранней весной.

# In[33]:


#4.2
#Как быстро продаются квартиры
good_objects['days_exposition'].hist(bins=100)

print('Среднее время продажи квартиры, дни:', good_objects['days_exposition'].mean().round())
print('Медианное время продажи квартиры, дни:',good_objects['days_exposition'].median())


# Как правило, нормальное время продажи квартиры - от 0 до 200 дней, быстрой продажей можно считать продажу до 30 дней. Медианное время - 95 дней (около 3 месяцев продается большинство квартир). Период продажи свыше 200 дней – долгие продажи.

# <b>Изучаем зависимости</b> (4.3)

# In[34]:


import numpy as np
#Цена от площади
price_corr = pd.DataFrame({'a':good_objects['total_area'], 'b':good_objects['last_price']})
x = price_corr['a']
y = price_corr['b']
plt.scatter(x, y)

plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))
         (np.unique(x)), color='red');
correlation = y.corr(x)
correlation


# In[37]:


#Цена от жилой площади
price_corr = pd.DataFrame({'a':good_objects['living_area'], 'b':good_objects['last_price']})
x = price_corr['a']
y = price_corr['b']
plt.scatter(x, y)

plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))
         (np.unique(x)), color='red');
correlation = y.corr(x)
correlation


# Есть положительная корреляция (меньшая, чем предыдущая) между ценой квартиры и ее жилой площадью (0,61)

#Цена от площади кухни
price_corr = pd.DataFrame({'a':good_objects['kitchen_area'], 'b':good_objects['last_price']})
x = price_corr['a']
y = price_corr['b']
 plt.scatter(x, y)

plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))
          (np.unique(x)), color='red');
correlation = y.corr(x)
correlation

# Есть положительная корреляция (еще меньшая, чем предыдущая) между ценой квартиры и площадью ее кухни (0,55)

# In[38]:


price_corr = pd.DataFrame({'a':good_objects['rooms'], 'b':good_objects['last_price']})
x = price_corr['a']
y = price_corr['b']
plt.scatter(x, y)

plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))
         (np.unique(x)), color='red');
correlation = y.corr(x)
correlation


# Есть положительная корреляция (еще меньшая, чем предыдущая) между ценой квартиры и количеством комнат (0,39)

# In[40]:


import seaborn as sns
#сгруппируем по типу этажа и по комнатам, посчитаем медиану
good_objects_grouped = good_objects.groupby(['floor_type', 'rooms']).agg(median_price=("last_price", 'median')).reset_index()
good_objects_grouped = good_objects_grouped.query('rooms <7') #отфильтруем редко встречающиеся значения
#выведем график
sns.barplot(x="rooms",
           y="median_price",
           hue="floor_type",
           data=good_objects_grouped);



# Очевидно, что нахождение квартиры на первом этаже снижает цену во всех группах квартир, наименее сильно – в однокомнатных, наиболее – в группе квартир с 4 и более комнатами.
# Нахождение на последнем этаже также снижает ее цену, однако заметно меньше.
# 

# In[41]:


print('Зависимость от года публикации объявления')
good_objects.pivot_table(index='year', values='last_price', aggfunc='median').plot(grid=True, style='o-', figsize=(5, 5));


# In[42]:


print('Зависимость от месяца публикации объявления')
m = good_objects.pivot_table(index='month', values='last_price', aggfunc='median')
#выведем график
sns.heatmap(m);


# Самый выгодный месяц публикации – апрель, за ним следуют декабрь, ноябрь и сентябрь, Самый невыгодный – июнь (за ним следует май)

# In[43]:


print('Зависимость от дня публикации объявления')
m = good_objects.pivot_table(index='weekday', values='last_price', aggfunc='median')
#выведем график
sns.heatmap(m);


# Самый выгодный день для публикации – вторник, после него - среда, а воскресенье, субботу и пятницу публиковать невыгодно.

# <b>Общий вывод по корреляциям:</b>
# С ростом общей площади растет и цена объекта (0,68), чуть менее на цену влияет жилая площадь(0,61), еще менее (0,55)– площадь кухни. Количество комнат влияет на цену еще в меньше степени (0,39).
# Расположение объекта продажи на первом и последнем этажах влияет на цену продажи объекта, снижая ее, причем расположение на первом этаже снижает ее сильнее, чем на последнем
# Квартиры, выставленные на продажу в 2014 году, продавались по максимальным за весь период наблюдений ценам, затем последовало падение (рынка?) до точки минимума в 2016-2017 годах, затем стоимость начала потихоньку расти, однако к значениям 2014 года к 2019 так и не вернулась.
# По наиболее высокой цене продаются квартиры, выставленные на продажу во вторник и среду, по самой низкой – выставленные в воскресенье (чуть меньше снижена цена на квартиры, выставленные в субботу, еще меньше – в пятницу).
# По наиболее высоким ценам продаются квартиры, выставленные на продажу в апреле, по минимальным – выставленные в июне (сезон отпусков и низкий трафик в этой области рынка?). Выставив квартиру в сентябре, ноябре или декабре, есть вероятность продать ее за хорошую цену (Санкт-Петербург и Ленобласть – северные регионы, вероятно важно, насколько жилье хорошо обогревается, а в холодные месяцы это проще оценить. Падение в январе, веноятно, компенсирует рост в декабре - квартира как новогодний подарок?)
# 

# In[44]:


flats_spb=good_objects.query('locality_name == "Санкт-Петербург"')
flats_not_spb=good_objects.query('locality_name == "Санкт-Петербург"')

print(flats_spb['days_exposition'].describe())
sns.boxplot(x=flats_spb["days_exposition"])
plt.show()

print(flats_not_spb['days_exposition'].describe())
sns.boxplot(x=flats_not_spb["days_exposition"]);


# Судя по всему, нет разницы в типичной схеме продажи квартиры в Санкт-Петербурге и других локациях: минимально квартира продается за 1 день, половина квартир продается за 95 дней, конец нормальной длительности продажи - 200 дней (все, что позже - долго)

# In[49]:


#Стоимость квадратного метра на километр удаленности

sq_price_spb = good_objects.query('locality_name == "Санкт-Петербург"').pivot_table(index='distance', values='square_price', aggfunc='mean')
print('Стоимость квадратного метра недвижимости на каждый километр от центра Санкт-Петербурга')
print(sq_price_spb)
sns.lineplot(data=sq_price_spb)

import matplotlib.pyplot as plt
plt.title('Зависимость цены квадратного метра от удалнности, км');


# Стоимость квадратного метра жилья в Санкт-Петербурге стабильно падает до 4 км, потом начинает расти до 6 включительно (элитные районы?), снова медленно падает до 11 км, на 12 и 13 незначительно растет, на 13 снова начинает снижаться до 20 (где, видимо, отстроен новый благоустроенный район либо изменилась логистика – построено новое метро и тп), после продолжает снижаться до 27 километра (другой город, инфраструктура которого оказывает влияние на стоимость?) и падает до 62,4 тысяч за квадрат на 29 километре. 


# In[46]:


#Считаем среднюю цену квадрата в локациях с наибольшим количеством объявлений

big_location = good_objects.pivot_table(index='locality_name', values='square_price', aggfunc=['median','count'])
#print(big_location)
#big_location.columns
big_location.sort_values([('count', 'square_price')], ascending=False).head(10) 



# ### Общий вывод

# In[ ]:


good_objects.describe()


# Типичная квартира выборки: площадь около 60 кв.м, из них жилая - около 35, кухня - около 10, комнат обычно 2, потолки стандартные 2.7 метра, с одним балконом или без него. Чаще всего квартиры в 14 от центра и в 28 км от аэропорта, с парковой зоной и прудом поблизости. Квартиры чаще публикуются в будни, пиковые дни – вторник и среда, пиковые месяцы публикаций - июнь/июль (что, вероятно, и объясняет падение цен в этот период). Квартиры чаще всего продаются за 95 дней, поэтому продажи длительностью меньше 30 и больше 200 дней можно считать необычайно быстрыми и долгими, соответственно. Больше всего объявлений приходится на СПб и поселок Мурино (м.Девяткино), который тоже можно условно считать городским районом из-за близости станции метро. Самая дорогая недвижимость – в г. Пушкин (Царское село) и д. Кудрово (м. Улица Дыбенко). Самая низкая из топа объявлений - в Выборге.
# 
# Зависимость стоимости квартиры от параметров: На общую стоимость жилья влияет площадь квартиры, ее жилая площадь и площадь кухни, а также наличие/отсутствие балкона. Больше всего на стоимость квартиры в СПб влияет ее удаленность от центра города: с каждым километром цена квадратного метра падает, повышаясь только в зоне блогоустроенных новых районов (новостройки в зоне новых конечных станций метро или пригороды)
# 
# Расположение объекта продажи на первом и последнем этажах влияет на цену продажи объекта, снижая ее, причем расположение на первом этаже снижает ее сильнее, чем на последнем.
# 
# Квартиры, выставленные на продажу в 2014 году, продавались по максимальным за весь период наблюдений ценам, затем последовало падение (рынка?) до точки минимума в 2016-2017 годах, затем стоимость начала потихоньку расти, однако к значениям 2014 года к 2019 так и не вернулась.
# 
# По наиболее высоким ценам продаются квартиры, выставленные на продажу в апреле, по минимальным – выставленные в июне (сезон отпусков и низкий трафик в этой области рынка?). Выставив квартиру в сентябре, ноябре или декабре, есть вероятность продать ее за хорошую цену (Санкт-Петербург и Ленобласть – северные регионы, вероятно важно, насколько жилье хорошо обогревается, а в холодные месяцы это проще оценить. Падение в январе, вероятно, компенсирует рост в декабре: люди, желающие такой подарок на новый год, будут покупать ее до праздников.
# 
# Пошагово:
# - изучена таблица
# - поправлены неверно записанные значения 
# - имеющиеся пропуски заменены медианными значениями, изучены наиболее частотные значения метрик, выявлены характерные для датасета объекты
# - рассмотрены завимости между различными значениями (площади, комнатность, время публикации объявления, цена продажи), значимые выведены графиками
# - изучена зависимость удаленности от центра Санкт-Петербурга и также выведена на график
# - сделан общий вывод 
# 

# **Чек-лист готовности проекта**
# 
# Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter.

# - [x]  открыт файл
# - [x]  файлы изучены (выведены первые строки, метод `info()`, гистограммы и т.д.)
# - [x]  определены пропущенные значения
# - [x]  заполнены пропущенные значения там, где это возможно
# - [x]  есть пояснение, какие пропущенные значения обнаружены
# - [x]  изменены типы данных
# - [x]  есть пояснение, в каких столбцах изменены типы и почему
# - [x]  устранены неявные дубликаты в названиях населённых пунктов
# - [x]  устранены редкие и выбивающиеся значения (аномалии) во всех столбцах
# - [x]  посчитано и добавлено в таблицу: цена одного квадратного метра
# - [x]  посчитано и добавлено в таблицу: день публикации объявления (0 - понедельник, 1 - вторник и т.д.)
# - [x]  посчитано и добавлено в таблицу: месяц публикации объявления
# - [x]  посчитано и добавлено в таблицу: год публикации объявления
# - [x]  посчитано и добавлено в таблицу: тип этажа квартиры (значения — «первый», «последний», «другой»)
# - [x]  посчитано и добавлено в таблицу: расстояние в км до центра города
# - [x]  изучены и описаны следующие параметры:
#         - общая площадь;
#         - жилая площадь;
#         - площадь кухни;
#         - цена объекта;
#         - количество комнат;
#         - высота потолков;
#         - этаж квартиры;
#         - тип этажа квартиры («первый», «последний», «другой»);
#         - общее количество этажей в доме;
#         - расстояние до центра города в метрах;
#         - расстояние до ближайшего аэропорта;
#         - расстояние до ближайшего парка;
#         - день и месяц публикации объявления
# - [x]  построены гистограммы для каждого параметра
# - [x]  выполнено задание: "Изучите, как быстро продавались квартиры (столбец days_exposition). Этот параметр показывает, сколько дней «висело» каждое объявление.
#     - Постройте гистограмму.
#     - Посчитайте среднее и медиану.
#     - В ячейке типа markdown опишите, сколько обычно занимает продажа. Какие продажи можно считать быстрыми, а какие — необычно долгими?"
# - [x]  выполнено задание: "Какие факторы больше всего влияют на общую (полную) стоимость объекта? Постройте графики, которые покажут зависимость цены от указанных ниже параметров. Для подготовки данных перед визуализацией вы можете использовать сводные таблицы."
#         - общей площади;
#         - жилой площади;
#         - площади кухни;
#         - количество комнат;
#         - типа этажа, на котором расположена квартира (первый, последний, другой);
#         - даты размещения (день недели, месяц, год);
# - [x]  выполнено задание: "Посчитайте среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений. Выделите населённые пункты с самой высокой и низкой стоимостью квадратного метра. Эти данные можно найти по имени в столбце `locality_name`."
# - [x]  выполнено задание: "Ранее вы посчитали расстояние до центра в километрах. Теперь выделите квартиры в Санкт-Петербурге с помощью столбца `locality_name` и вычислите среднюю цену каждого километра. Опишите, как стоимость объектов зависит от расстояния до центра города."
# - [x]  в каждом этапе есть промежуточные выводы
# - [x]  есть общий вывод
